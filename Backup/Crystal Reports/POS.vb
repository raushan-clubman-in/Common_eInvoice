'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2463
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset1
    Inherits DataSet
    
    Private tableVIEW_FSNrpt As VIEW_FSNrptDataTable
    
    Private tableview_billsummary As view_billsummaryDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_FSNrpt")) Is Nothing) Then
                Me.Tables.Add(New VIEW_FSNrptDataTable(ds.Tables("VIEW_FSNrpt")))
            End If
            If (Not (ds.Tables("view_billsummary")) Is Nothing) Then
                Me.Tables.Add(New view_billsummaryDataTable(ds.Tables("view_billsummary")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_FSNrpt As VIEW_FSNrptDataTable
        Get
            Return Me.tableVIEW_FSNrpt
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property view_billsummary As view_billsummaryDataTable
        Get
            Return Me.tableview_billsummary
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset1 = CType(MyBase.Clone,Dataset1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("VIEW_FSNrpt")) Is Nothing) Then
            Me.Tables.Add(New VIEW_FSNrptDataTable(ds.Tables("VIEW_FSNrpt")))
        End If
        If (Not (ds.Tables("view_billsummary")) Is Nothing) Then
            Me.Tables.Add(New view_billsummaryDataTable(ds.Tables("view_billsummary")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableVIEW_FSNrpt = CType(Me.Tables("VIEW_FSNrpt"),VIEW_FSNrptDataTable)
        If (Not (Me.tableVIEW_FSNrpt) Is Nothing) Then
            Me.tableVIEW_FSNrpt.InitVars
        End If
        Me.tableview_billsummary = CType(Me.Tables("view_billsummary"),view_billsummaryDataTable)
        If (Not (Me.tableview_billsummary) Is Nothing) Then
            Me.tableview_billsummary.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableVIEW_FSNrpt = New VIEW_FSNrptDataTable
        Me.Tables.Add(Me.tableVIEW_FSNrpt)
        Me.tableview_billsummary = New view_billsummaryDataTable
        Me.Tables.Add(Me.tableview_billsummary)
    End Sub
    
    Private Function ShouldSerializeVIEW_FSNrpt() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeview_billsummary() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub VIEW_FSNrptRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_FSNrptRowChangeEvent)
    
    Public Delegate Sub view_billsummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As view_billsummaryRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_FSNrptDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemCode As DataColumn
        
        Private columnItemDesc As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnFSNDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_FSNrpt")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property ItemDescColumn As DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property FSNDESCColumn As DataColumn
            Get
                Return Me.columnFSNDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_FSNrptRow
            Get
                Return CType(Me.Rows(index),VIEW_FSNrptRow)
            End Get
        End Property
        
        Public Event VIEW_FSNrptRowChanged As VIEW_FSNrptRowChangeEventHandler
        
        Public Event VIEW_FSNrptRowChanging As VIEW_FSNrptRowChangeEventHandler
        
        Public Event VIEW_FSNrptRowDeleted As VIEW_FSNrptRowChangeEventHandler
        
        Public Event VIEW_FSNrptRowDeleting As VIEW_FSNrptRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_FSNrptRow(ByVal row As VIEW_FSNrptRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_FSNrptRow(ByVal ItemCode As String, ByVal ItemDesc As String, ByVal QTY As Decimal, ByVal FSNDESC As String) As VIEW_FSNrptRow
            Dim rowVIEW_FSNrptRow As VIEW_FSNrptRow = CType(Me.NewRow,VIEW_FSNrptRow)
            rowVIEW_FSNrptRow.ItemArray = New Object() {ItemCode, ItemDesc, QTY, FSNDESC}
            Me.Rows.Add(rowVIEW_FSNrptRow)
            Return rowVIEW_FSNrptRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_FSNrptDataTable = CType(MyBase.Clone,VIEW_FSNrptDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_FSNrptDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnItemDesc = Me.Columns("ItemDesc")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnFSNDESC = Me.Columns("FSNDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnItemDesc = New DataColumn("ItemDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemDesc)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnFSNDESC = New DataColumn("FSNDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFSNDESC)
            Me.columnItemCode.AllowDBNull = false
            Me.columnFSNDESC.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_FSNrptRow() As VIEW_FSNrptRow
            Return CType(Me.NewRow,VIEW_FSNrptRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_FSNrptRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_FSNrptRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_FSNrptRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_FSNrptRowChanged(Me, New VIEW_FSNrptRowChangeEvent(CType(e.Row,VIEW_FSNrptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_FSNrptRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_FSNrptRowChanging(Me, New VIEW_FSNrptRowChangeEvent(CType(e.Row,VIEW_FSNrptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_FSNrptRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_FSNrptRowDeleted(Me, New VIEW_FSNrptRowChangeEvent(CType(e.Row,VIEW_FSNrptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_FSNrptRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_FSNrptRowDeleting(Me, New VIEW_FSNrptRowChangeEvent(CType(e.Row,VIEW_FSNrptRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_FSNrptRow(ByVal row As VIEW_FSNrptRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_FSNrptRow
        Inherits DataRow
        
        Private tableVIEW_FSNrpt As VIEW_FSNrptDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_FSNrpt = CType(Me.Table,VIEW_FSNrptDataTable)
        End Sub
        
        Public Property ItemCode As String
            Get
                Return CType(Me(Me.tableVIEW_FSNrpt.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FSNrpt.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property ItemDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FSNrpt.ItemDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FSNrpt.ItemDescColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FSNrpt.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FSNrpt.QTYColumn) = value
            End Set
        End Property
        
        Public Property FSNDESC As String
            Get
                Return CType(Me(Me.tableVIEW_FSNrpt.FSNDESCColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FSNrpt.FSNDESCColumn) = value
            End Set
        End Property
        
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FSNrpt.ItemDescColumn)
        End Function
        
        Public Sub SetItemDescNull()
            Me(Me.tableVIEW_FSNrpt.ItemDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FSNrpt.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableVIEW_FSNrpt.QTYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_FSNrptRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_FSNrptRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_FSNrptRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_FSNrptRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class view_billsummaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbillno As DataColumn
        
        Private columnkotdate As DataColumn
        
        Private columnkotno As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columnamount As DataColumn
        
        Private columntaxamount As DataColumn
        
        Private columnpackamount As DataColumn
        
        Private columnser_chg As DataColumn
        
        Private columnposcode As DataColumn
        
        Private columnposdesc As DataColumn
        
        Private columntotalamt As DataColumn
        
        Friend Sub New()
            MyBase.New("view_billsummary")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property billnoColumn As DataColumn
            Get
                Return Me.columnbillno
            End Get
        End Property
        
        Friend ReadOnly Property kotdateColumn As DataColumn
            Get
                Return Me.columnkotdate
            End Get
        End Property
        
        Friend ReadOnly Property kotnoColumn As DataColumn
            Get
                Return Me.columnkotno
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property taxamountColumn As DataColumn
            Get
                Return Me.columntaxamount
            End Get
        End Property
        
        Friend ReadOnly Property packamountColumn As DataColumn
            Get
                Return Me.columnpackamount
            End Get
        End Property
        
        Friend ReadOnly Property ser_chgColumn As DataColumn
            Get
                Return Me.columnser_chg
            End Get
        End Property
        
        Friend ReadOnly Property poscodeColumn As DataColumn
            Get
                Return Me.columnposcode
            End Get
        End Property
        
        Friend ReadOnly Property posdescColumn As DataColumn
            Get
                Return Me.columnposdesc
            End Get
        End Property
        
        Friend ReadOnly Property totalamtColumn As DataColumn
            Get
                Return Me.columntotalamt
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As view_billsummaryRow
            Get
                Return CType(Me.Rows(index),view_billsummaryRow)
            End Get
        End Property
        
        Public Event view_billsummaryRowChanged As view_billsummaryRowChangeEventHandler
        
        Public Event view_billsummaryRowChanging As view_billsummaryRowChangeEventHandler
        
        Public Event view_billsummaryRowDeleted As view_billsummaryRowChangeEventHandler
        
        Public Event view_billsummaryRowDeleting As view_billsummaryRowChangeEventHandler
        
        Public Overloads Sub Addview_billsummaryRow(ByVal row As view_billsummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addview_billsummaryRow(ByVal billno As String, ByVal kotdate As Date, ByVal kotno As String, ByVal mcode As String, ByVal mname As String, ByVal amount As Decimal, ByVal taxamount As Decimal, ByVal packamount As Decimal, ByVal ser_chg As Decimal, ByVal poscode As String, ByVal posdesc As String, ByVal totalamt As Decimal) As view_billsummaryRow
            Dim rowview_billsummaryRow As view_billsummaryRow = CType(Me.NewRow,view_billsummaryRow)
            rowview_billsummaryRow.ItemArray = New Object() {billno, kotdate, kotno, mcode, mname, amount, taxamount, packamount, ser_chg, poscode, posdesc, totalamt}
            Me.Rows.Add(rowview_billsummaryRow)
            Return rowview_billsummaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As view_billsummaryDataTable = CType(MyBase.Clone,view_billsummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New view_billsummaryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbillno = Me.Columns("billno")
            Me.columnkotdate = Me.Columns("kotdate")
            Me.columnkotno = Me.Columns("kotno")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columnamount = Me.Columns("amount")
            Me.columntaxamount = Me.Columns("taxamount")
            Me.columnpackamount = Me.Columns("packamount")
            Me.columnser_chg = Me.Columns("ser_chg")
            Me.columnposcode = Me.Columns("poscode")
            Me.columnposdesc = Me.Columns("posdesc")
            Me.columntotalamt = Me.Columns("totalamt")
        End Sub
        
        Private Sub InitClass()
            Me.columnbillno = New DataColumn("billno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbillno)
            Me.columnkotdate = New DataColumn("kotdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnkotdate)
            Me.columnkotno = New DataColumn("kotno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnkotno)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columntaxamount = New DataColumn("taxamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxamount)
            Me.columnpackamount = New DataColumn("packamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpackamount)
            Me.columnser_chg = New DataColumn("ser_chg", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnser_chg)
            Me.columnposcode = New DataColumn("poscode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnposcode)
            Me.columnposdesc = New DataColumn("posdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnposdesc)
            Me.columntotalamt = New DataColumn("totalamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotalamt)
            Me.columnbillno.AllowDBNull = false
            Me.columnkotdate.AllowDBNull = false
            Me.columnkotno.AllowDBNull = false
            Me.columnposcode.AllowDBNull = false
            Me.columnposdesc.AllowDBNull = false
        End Sub
        
        Public Function Newview_billsummaryRow() As view_billsummaryRow
            Return CType(Me.NewRow,view_billsummaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New view_billsummaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(view_billsummaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.view_billsummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent view_billsummaryRowChanged(Me, New view_billsummaryRowChangeEvent(CType(e.Row,view_billsummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.view_billsummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent view_billsummaryRowChanging(Me, New view_billsummaryRowChangeEvent(CType(e.Row,view_billsummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.view_billsummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent view_billsummaryRowDeleted(Me, New view_billsummaryRowChangeEvent(CType(e.Row,view_billsummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.view_billsummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent view_billsummaryRowDeleting(Me, New view_billsummaryRowChangeEvent(CType(e.Row,view_billsummaryRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeview_billsummaryRow(ByVal row As view_billsummaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class view_billsummaryRow
        Inherits DataRow
        
        Private tableview_billsummary As view_billsummaryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableview_billsummary = CType(Me.Table,view_billsummaryDataTable)
        End Sub
        
        Public Property billno As String
            Get
                Return CType(Me(Me.tableview_billsummary.billnoColumn),String)
            End Get
            Set
                Me(Me.tableview_billsummary.billnoColumn) = value
            End Set
        End Property
        
        Public Property kotdate As Date
            Get
                Return CType(Me(Me.tableview_billsummary.kotdateColumn),Date)
            End Get
            Set
                Me(Me.tableview_billsummary.kotdateColumn) = value
            End Set
        End Property
        
        Public Property kotno As String
            Get
                Return CType(Me(Me.tableview_billsummary.kotnoColumn),String)
            End Get
            Set
                Me(Me.tableview_billsummary.kotnoColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableview_billsummary.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_billsummary.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tableview_billsummary.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_billsummary.mnameColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableview_billsummary.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_billsummary.amountColumn) = value
            End Set
        End Property
        
        Public Property taxamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableview_billsummary.taxamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_billsummary.taxamountColumn) = value
            End Set
        End Property
        
        Public Property packamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableview_billsummary.packamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_billsummary.packamountColumn) = value
            End Set
        End Property
        
        Public Property ser_chg As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableview_billsummary.ser_chgColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_billsummary.ser_chgColumn) = value
            End Set
        End Property
        
        Public Property poscode As String
            Get
                Return CType(Me(Me.tableview_billsummary.poscodeColumn),String)
            End Get
            Set
                Me(Me.tableview_billsummary.poscodeColumn) = value
            End Set
        End Property
        
        Public Property posdesc As String
            Get
                Return CType(Me(Me.tableview_billsummary.posdescColumn),String)
            End Get
            Set
                Me(Me.tableview_billsummary.posdescColumn) = value
            End Set
        End Property
        
        Public Property totalamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableview_billsummary.totalamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_billsummary.totalamtColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableview_billsummary.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableview_billsummary.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tableview_billsummary.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tableview_billsummary.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableview_billsummary.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableview_billsummary.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxamountNull() As Boolean
            Return Me.IsNull(Me.tableview_billsummary.taxamountColumn)
        End Function
        
        Public Sub SettaxamountNull()
            Me(Me.tableview_billsummary.taxamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspackamountNull() As Boolean
            Return Me.IsNull(Me.tableview_billsummary.packamountColumn)
        End Function
        
        Public Sub SetpackamountNull()
            Me(Me.tableview_billsummary.packamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isser_chgNull() As Boolean
            Return Me.IsNull(Me.tableview_billsummary.ser_chgColumn)
        End Function
        
        Public Sub Setser_chgNull()
            Me(Me.tableview_billsummary.ser_chgColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalamtNull() As Boolean
            Return Me.IsNull(Me.tableview_billsummary.totalamtColumn)
        End Function
        
        Public Sub SettotalamtNull()
            Me(Me.tableview_billsummary.totalamtColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class view_billsummaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As view_billsummaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As view_billsummaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As view_billsummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
